# Multi-stage build for optimal image size
FROM node:22.17.1-alpine AS base

# Install security updates, dumb-init, and curl for health checks
RUN apk update && apk upgrade && \
    apk add --no-cache dumb-init curl && \
    rm -rf /var/cache/apk/*

# Create non-root user for security
RUN addgroup --system --gid 1001 nodejs && \
    adduser --system --uid 1001 nextjs

WORKDIR /app

# Dependencies stage
FROM base AS deps
COPY package*.json ./
RUN npm ci --only=production --omit=dev && npm cache clean --force

# Build stage
FROM base AS build
COPY package*.json ./
RUN npm ci --include=dev
COPY . .

# Build the application
RUN npm run build && \
    npm prune --omit=dev && \
    npm cache clean --force

# Production stage
FROM base AS production

# Copy built application and dependencies
COPY --from=deps --chown=nextjs:nodejs /app/node_modules ./node_modules
COPY --from=build --chown=nextjs:nodejs /app/.next ./.next
COPY --from=build --chown=nextjs:nodejs /app/public ./public
COPY --from=build --chown=nextjs:nodejs /app/package.json ./package.json

# Security: Remove package managers and build tools
RUN apk del npm && \
    rm -rf /usr/local/lib/node_modules/npm

# Set proper permissions
RUN chown -R nextjs:nodejs /app

# Switch to non-root user
USER nextjs

# Expose port
EXPOSE 3000

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:3000/api/health || exit 1

# Use dumb-init for proper signal handling
ENTRYPOINT ["dumb-init", "--"]
CMD ["node_modules/.bin/next", "start"]
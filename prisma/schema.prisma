// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================================================================
// USER MANAGEMENT & AUTHENTICATION
// ============================================================================

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  avatar    String?
  role      UserRole @default(USER)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Authentication
  accounts Account[]
  sessions Session[]

  // Activity tracking
  donations           Donation[]
  submittedExpenses   Expense[] @relation("ExpenseSubmitter")
  reviewedExpenses    Expense[] @relation("ExpenseReviewer") 
  campaigns           Campaign[]
  auditLogs           AuditLog[]
  
  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

enum UserRole {
  SUPER_ADMIN
  PRESIDENT
  VICE_PRESIDENT
  SECRETARY
  FINANCE
  PARTNERSHIPS
  VISUAL_IDENTITY
  USER
}

// ============================================================================
// CAMPAIGNS & DONATIONS
// ============================================================================

model Campaign {
  id          String           @id @default(cuid())
  name        String
  description String?          @db.Text
  objective   String           @db.Text
  goalAmount  Decimal          @db.Decimal(12, 2)
  startDate   DateTime
  endDate     DateTime?
  status      CampaignStatus   @default(ACTIVE)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  createdBy   String

  // Relations
  creator   User       @relation(fields: [createdBy], references: [id])
  donations Donation[]

  @@map("campaigns")
}

enum CampaignStatus {
  DRAFT
  ACTIVE
  COMPLETED
  CANCELLED
}

model Donor {
  id        String   @id @default(cuid())
  firstName String
  lastName  String
  email     String?  @unique
  phone     String?
  country   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  donations Donation[]

  @@map("donors")
}

model PartnerEnterprise {
  id        String   @id @default(cuid())
  name      String
  website   String?
  logo      String?  // URL to logo image
  email     String?  @unique
  phone     String?
  country   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  donations    Donation[]
  commitments  PartnershipCommitment[]

  @@map("partner_enterprises")
}

model PartnershipCommitment {
  id                String    @id @default(cuid())
  year              Int       // e.g., 2024, 2025
  committedAmount   Decimal   @db.Decimal(12, 2)
  currency          String    @default("XAF")
  description       String?   @db.Text // Details about the commitment
  status            CommitmentStatus @default(ACTIVE)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  // Relations
  partnerEnterpriseId String
  partner             PartnerEnterprise @relation(fields: [partnerEnterpriseId], references: [id], onDelete: Cascade)

  // Unique constraint: one commitment per partner per year
  @@unique([partnerEnterpriseId, year])
  @@map("partnership_commitments")
}

enum CommitmentStatus {
  ACTIVE
  FULFILLED
  CANCELLED
  SUSPENDED
}

model Donation {
  id               String        @id @default(cuid())
  amount           Decimal       @db.Decimal(10, 2)
  currency         String        @default("XAF")
  paymentMethod    PaymentMethod
  transactionId    String?       @unique
  isRecurring      Boolean       @default(false)
  recurringPeriod  String?       // monthly, yearly, etc.
  status           DonationStatus @default(PENDING)
  donationDate     DateTime      @default(now())
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  
  // Donor type - either individual or partner enterprise
  donorType        DonorType

  // Relations - either donorId OR partnerEnterpriseId should be set
  donorId              String?
  partnerEnterpriseId  String?
  campaignId           String?
  recordedBy           String

  donor           Donor?             @relation(fields: [donorId], references: [id])
  partnerEnterprise PartnerEnterprise? @relation(fields: [partnerEnterpriseId], references: [id])
  campaign        Campaign?          @relation(fields: [campaignId], references: [id])
  recorder        User               @relation(fields: [recordedBy], references: [id])

  @@map("donations")
}

enum DonorType {
  INDIVIDUAL
  PARTNER_ENTERPRISE
}

enum PaymentMethod {
  MOMO
  ORANGE_MONEY
  PAYPAL
  BANK_TRANSFER
  CASH
  OTHER
}

enum DonationStatus {
  PENDING
  CONFIRMED
  FAILED
  REFUNDED
}

// ============================================================================
// EXPENSE MANAGEMENT
// ============================================================================

model Expense {
  id          String        @id @default(cuid())
  title       String
  description String?       @db.Text
  amount      Decimal       @db.Decimal(10, 2)
  currency    String        @default("XAF")
  category    ExpenseCategory
  receiptUrl  String?
  status      ExpenseStatus @default(PENDING)
  submittedAt DateTime      @default(now())
  reviewedAt  DateTime?
  paidAt      DateTime?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Relations
  submittedBy String
  reviewedBy  String?

  submitter User  @relation("ExpenseSubmitter", fields: [submittedBy], references: [id])
  reviewer  User? @relation("ExpenseReviewer", fields: [reviewedBy], references: [id])

  @@map("expenses")
}

enum ExpenseCategory {
  PROGRAM_COSTS
  ADMINISTRATIVE
  MARKETING
  EQUIPMENT
  TRAVEL
  UTILITIES
  OTHER
}

enum ExpenseStatus {
  PENDING
  VALIDATED
  DISBURSED
  REJECTED
  DONE
}

// ============================================================================
// AUDIT & LOGGING
// ============================================================================

model AuditLog {
  id        String   @id @default(cuid())
  action    String   // CREATE, UPDATE, DELETE, LOGIN, etc.
  entity    String   // User, Donation, Campaign, etc.
  entityId  String?
  details   Json?    // Additional context
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())

  // Relations
  userId String?
  user   User?  @relation(fields: [userId], references: [id])

  @@map("audit_logs")
}

// ============================================================================
// SYSTEM CONFIGURATION
// ============================================================================

model SystemConfig {
  id    String @id @default(cuid())
  key   String @unique
  value Json
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("system_config")
}